@using Services
@using HexedSceneryMobileApp.Helpers
@using HexedSceneryMobileApp.Models

@inject IDiceRollHelper DiceRollHelper
@inject IDiceService DiceService

@if (_diceType == null)
{
    <span>Loading...</span>
}
else
{
    <div style="flex-direction: row;" class="d-flex">
        <MudTextField T="int?" DebounceInterval="500" @bind-Value=_result Label="@_label" Variant="@Variant.Text" OnDebounceIntervalElapsed="ManualDiceResultInput" />
        @* <MudTextField T="string" DebounceInterval="500" @bind-Value=_result Label="@_label" Variant="@Variant.Text" OnDebounceIntervalElapsed="ManualDiceResultInput" /> *@
        <MudIconButton OnClick="Roll" Icon="@Icons.Material.Filled.Casino" aria-label="shuffle" />
    </div>
}




@code {
    [Parameter]
    public int DiceTypeId { get; set; }
    [Parameter]
    public int NumberOfDice { get; set; }
    [Parameter]
    public EventCallback<int> OnNewResult { get; set; }

    // private int? _result { get; set; }
    private int? _result;
    // private string _result;
    private DiceType _diceType { get; set; }
    private string _label;

    public async Task Roll()
    {
        var result = await DiceRollHelper.Roll(_diceType, NumberOfDice);
        await OnNewResult.InvokeAsync(result);
        // _result = result.ToString();
        _result = result;
        StateHasChanged();
    }


    protected override async Task OnParametersSetAsync()
    {
        _diceType = await DiceService.GetDiceTypeAsync(DiceTypeId);
        _label = $"Roll {NumberOfDice}{_diceType.DisplayName} and enter the result or push the button to roll the dice";
        // _result = "";
    }

    private void ManualDiceResultInput()
    {
        if (_result.HasValue)
        {
            OnNewResult.InvokeAsync(_result.Value);
        }
        // if (int.TryParse(_result, out int result))
        // {
        //     OnNewResult.InvokeAsync(result);
        // }
    }
}
