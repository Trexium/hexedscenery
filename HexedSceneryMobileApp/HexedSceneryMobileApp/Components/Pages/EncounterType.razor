@page "/encounterType/{encountertypeid}"
@using HexedSceneryMobileApp.Services

@inject IEncounterService EncounterService
@inject IMyRollsService MyRollsService

@if (_encounterType == null)
{
    <span>Loading...</span>
}
else
{
    <h1>@_encounterType.DisplayName</h1>

    <HexedSceneryMobileApp.Components.Components.DiceRoller DiceTypeId="@_encounterType.DiceType.Id" NumberOfDice="@_encounterType.NumberOfDice.Value" OnNewResult="UpdateDiceResult" />

    if (_encounterType.Description != null)
    {
        <div>&nbsp;</div>
        <MudExpansionPanels>
            <MudExpansionPanel Class="schoensperger text" Text="Description" Expanded="false">
                <div class="description">
                    @((MarkupString)_encounterType.Description)
                </div>
            </MudExpansionPanel>
        </MudExpansionPanels>
    }

    @if (_encounterResult != null)
    {
        <HexedSceneryMobileApp.Components.Components.Encounter CurrentEncounter="@_encounterResult" />
    }
}




@code {
    [Parameter]
    public string EncounterTypeId { get; set; }

    private Models.EncounterType _encounterType;

    private Models.Encounter _encounterResult;


    protected override async Task OnInitializedAsync()
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        if (int.TryParse(EncounterTypeId, out int result))
        {
            _encounterType = await EncounterService.GetEncounterTypeAsync(result);
        }
    }

    public async Task UpdateDiceResult(int newResult)
    {
        _encounterResult = await EncounterService.GetEncounterAsync(_encounterType.Id, newResult);
        await MyRollsService.AddRoll(_encounterResult);
    }
}
