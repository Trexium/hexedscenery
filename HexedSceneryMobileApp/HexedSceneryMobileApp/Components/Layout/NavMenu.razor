@using HexedSceneryMobileApp.Helpers
@using HexedSceneryMobileApp.Models

@inject IMenuBuilder menuBuilder

@* <input type="checkbox" title="Navigation menu" class="navbar-toggler" /> *@
<div class="background-paper-menu">
    <svg>
        <filter id="wavy2">
            <feTurbulence x="0" y="0" baseFrequency="0.022" numOctaves="5" seed="1"></feTurbulence>
            <feDisplacementMap in="SourceGraphic" scale="50" />
        </filter>
    </svg>
</div>
@* <MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>
    <MudNavLink Href="weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.List">Fetch data</MudNavLink>
</MudNavMenu> *@

<MudNavMenu Class="overflow-hidden">
    @if (menuTitles == null)
    {
        <span>Loading...</span>
    }
    else
    {
        @foreach (var title in menuTitles)
        {
            <MudNavGroup Class="nav-category" Title="@title.DisplayTitle" Expanded="false" @bind-Expanded=>
                @foreach (var menuItem in title.Children)
                {
                    <MudNavLink Href="@menuItem.Url" Match="NavLinkMatch.Prefix">@menuItem.DisplayName</MudNavLink>
                }
            </MudNavGroup>
            @*             <div class="nav-item px-3 category" style="font-size: large">

    </div> *@

        }
    }

</MudNavMenu>


@code {
    List<MenuTitle> menuTitles;

    private Dictionary<string, MudNavGroup> menuItems = new();

    protected override async Task OnInitializedAsync()
    {
        menuTitles = await menuBuilder.GetMenuAsync();

        foreach(var title in menuTitles)
        {
            var group = new MudNavGroup();
            group.Title = title.DisplayTitle;

            foreach(var menuItem in title.Children)
            {
                var link = new MudNavLink();
                link.Match = NavLinkMatch.Prefix;
                link. menuItem.DisplayName;
            }
            menuItems.Add(title.DisplayTitle, group);
        }
    }

    private void ToggleExpanded(bool expanded, string itemName)
    {
        if (expanded)
        {
            foreach (var entry in this.subMenuItems.Where(entry => entry.Key != itemName))
            {
                entry.Value.Expanded = false;
            }
        }
    }
}