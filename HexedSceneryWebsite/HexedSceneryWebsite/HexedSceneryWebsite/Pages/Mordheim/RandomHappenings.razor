@using Components
@page "/mordheim/randomhappenings/{encounterType:int}"
@using HexedSceneryCommon.Mordheim;
@using HexedSceneryCommon.User;
@inject Services.IEncounterService _randomHappeningsService
@inject Services.IUserService _userService;
@inject Services.IUserStoredEncountersService _userStoredEncountersService;


<PageTitle>@title</PageTitle>


<div class="background-paper">
    <svg>
        <filter id="wavy2">
            <feTurbulence x="0" y="0" baseFrequency="0.02" numOctaves="5" seed="1"></feTurbulence>
            <feDisplacementMap in="SourceGraphic" scale="20" />
        </filter>
    </svg>
</div>
<div class="mordheim-page">
    <div class="random-happening-pane">
        <h2>@title</h2>
        <label for="resultNumber">@diceRollText</label>
        <br />
        <input id="resultNumber" @oninput="FindEncounter" />
        <br />
        Or
        <br />
        <div @onclick="@GenerateResultSubmit" class="randomize-btn">
            <span>Shuffle</span>
            <img src="images/dice.svg"
        </div>
    </div>
    <br />
    <div class="encounter">
        @if (prevEncounters != null)
        {
            <div class="previous-encounters container">
                <div class="row">
                    <div class="col-12">
                        <div class="row">
                            <div class="col-lg-5 col-9">
                                <div class="row">
                                    <div class="previous-encounters-title col-lg-2 col-3">
                                        Result
                                    </div>
                                    <div class="previous-encounters-title col-lg-10 col-9">
                                        @title
                                    </div>
                                </div>
                            </div>
                        </div>
                        @foreach (var prevEncounter in prevEncounters)
                        {
                            @if (prevEncounter != null)
                            {
                                <div class="previous-encounters-list">
                                    <div class="row">
                                        <div @onclick="() => GoToPreviousEncounter(prevEncounter)" class="previous-encounters-list-item col-lg-5 col-9">
                                            <div class="row">
                                                <div class="col-lg-2 col-3">
                                                    @prevEncounter.ResultNumber
                                                </div>
                                                <div class="col-lg-10 col-9">
                                                    @prevEncounter.Name
                                                </div>
                                            </div>
                                        </div>
                                        <div class="previous-encounters-list-item-trash col-lg-2 col-1">
                                            <span @onclick="() => DeletePreviousEncounter(prevEncounters.IndexOf(prevEncounter))" class="oi oi-trash" />
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <br />
            <br />
        }


        @if (encounter != null)
        {

            <h3>@encounter.ResultNumber @encounter.Name</h3>
            <p>@((MarkupString)encounter.Description)</p>

            @if (encounter.DiceChart != null)
            {
                <table class="dice-chart-table">
                    <thead>
                        <tr>
                            <th class="first-column">@encounter.DiceChart.Dice</th>
                            <th>Result</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in encounter.DiceChart.DiceResults)
                        {
                            <tr>
                                <td>@result.ResultNumber</td>
                                <td>@((MarkupString)result.Description)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            @if (encounter.Monster != null)
            {
                @if (encounter.Monster.Profile != null)
                {
                    <span class="first-column">@encounter.Monster.Name</span>
                    <table class="profile-table">
                        <thead>
                            <tr>
                                <th class="first-column">Profile</th>
                                <th>M</th>
                                <th>WS</th>
                                <th>BS</th>
                                <th>S</th>
                                <th>T</th>
                                <th>W</th>
                                <th>I</th>
                                <th>A</th>
                                <th>Ld</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td class="first-column">@encounter.Monster.Name</td>
                                <td>@encounter.Monster.Profile.Movement</td>
                                <td>@encounter.Monster.Profile.WeaponSkill</td>
                                <td>@encounter.Monster.Profile.BallisticSkill</td>
                                <td>@encounter.Monster.Profile.Strength</td>
                                <td>@encounter.Monster.Profile.Toughness</td>
                                <td>@encounter.Monster.Profile.Wounds</td>
                                <td>@encounter.Monster.Profile.Initiative</td>
                                <td>@encounter.Monster.Profile.Attacks</td>
                                <td>@encounter.Monster.Profile.Leadership</td>
                            </tr>
                        </tbody>
                    </table>
                }

                @if (encounter.Monster.Skills != null)
                {
                    foreach (var skill in encounter.Monster.Skills)
                    {
                        <p class="skill"><b>@skill.Name:</b> @((MarkupString)skill.Description)</p>
                    }
                }
            }
            @if (!string.IsNullOrEmpty(encounter.BottomText))
            {
                <p>@((MarkupString)encounter.BottomText)</p>
            }

        }
        @if (!string.IsNullOrEmpty(description))
        {
            <h2>Description</h2>
            <p>@((MarkupString)description)</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public int EncounterType { get; set; }

    string resultNumberString = string.Empty;

    UserInfo userInfo;
    List<Encounter> prevEncounters;
    string encounterStoreKey;

    Encounter encounter;

    string title;
    string diceRollText;
    string description;

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    private async void GoToPreviousEncounter(Encounter prevEncounter)
    {
        encounter = prevEncounter;
        StateHasChanged();
    }

    private async void DeletePreviousEncounter(int prevEncounterIndex)
    {
        prevEncounters.RemoveAt(prevEncounterIndex);
        StateHasChanged();
    }

    private async void FindEncounter(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (args.Value != null && !string.IsNullOrEmpty(args.Value.ToString()))
        {
            if (int.TryParse(args.Value.ToString(), out int resultNumber))
            {
                encounter = await _randomHappeningsService.GetEncounter(resultNumber, EncounterType);

                if (encounter != null)
                {
                    await _userStoredEncountersService.StoreEncounter(encounterStoreKey, encounter);
                    prevEncounters = await _userStoredEncountersService.GetUserEncounters(encounterStoreKey);
                }

                StateHasChanged();
            }
            else
            {
                ErrorComponent.ShowError("Invalid dice result.", $"{args.Value.ToString()} is not a valid D66 result.");
            }
        }
    }

    private async void GenerateResultSubmit()
    {
        encounter = await _randomHappeningsService.GetRandomEncounter(EncounterType);

        if (encounter != null)
        {
            await _userStoredEncountersService.StoreEncounter(encounterStoreKey, encounter);
            prevEncounters = await _userStoredEncountersService.GetUserEncounters(encounterStoreKey);
        }

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        userInfo = await _userService.GetUserInfo();
    }

    protected override async Task OnParametersSetAsync()
    {
        encounterStoreKey = $"{userInfo.IpAddress}_{EncounterType}";
        prevEncounters = await _userStoredEncountersService.GetUserEncounters(encounterStoreKey);
        description = null;
        encounter = null;
        
        switch (EncounterType)
        {
            case 1:
                title = "Random Happenings";
                diceRollText = "Roll a D66 and enter the result:";
                break;
            case 2:
                title = "Subplots";
                diceRollText = "Roll 3D6 and enter the result:";
                break;
            case 3:
                title = "Power of the Stones";
                diceRollText = "Roll 2D6 and enter the result:";
                description = @"The value of the wyrdstone shards is not
                                simply the coin that nobles and
                                merchants are willing to pay for them. It is a
                                well-known fact that the stones are rich in
                                magic, and they are said to grant a variety of
                                powers to those that learn to use them. Tales
                                are told among the common folk of stones
                                that caused a certain farmer’s harvest to
                                double, or of the stone that made old Herr
                                Grutenbauer's dog speak like a man. True or
                                not, these tales hint at the powerful and
                                chaotic forces at work in the stones. The most
                                common use for the stones’ magic has to do
                                with the discovery of the famed alchemist van
                                Hoffman of Reikland. It was he who first
                                observed that Wyrdstone can serve as a
                                catalyst in the transmutation of base metals
                                into gold. This usage of the stones has come
                                to be the primary obsession of those who seek
                                it, for many are willing to pay princely sums
                                for stones that will make them an even larger
                                fortune. Yet there are those who continue to
                                seek the stones for their more arcane
                                uses, and even mercenaries have
                                been known to keep a stone
                                or two that was thought
                                to bring luck, healing,
                                or other magical
                                benefits.<br /><br />
                                Yet the stones
                                are ultimately
                                the work of
                                Chaos, and
                                those who
                                seek to
                                use
                                them
                                often
                                learn
                                to
                                fear their magic rather than harness it. For
                                every tale of a harvest that doubled, there are
                                two about the harvests that rotted in the field
                                when exposed to the strange glow of the
                                stones; and for every tale of a dog that learned
                                to speak like a man there are darker tales of
                                animals that turned into a gruesome parody of
                                a man-beast. The tales of magical healings are
                                mixed with many of mutation and death
                                brought on by exposure to the stones. Yet
                                greed is the downfall of many in the City of
                                the Damned, and the greed for power is
                                perhaps the greatest of all...<br /><br />
                                Note: Witch Hunters, Sisters of Sigmar,
                                Bretonnians, High Elf Shadow Warriors and
                                Dwarfs are all too aware of the corrupting
                                power of the stones, and will not make use of
                                them under any circumstances.<br /><br />
                                <h2>Evaluating Stones</h2>
                                Instead of selling or storing all of a warband's
                                wyrdstone shards, a player may choose to
                                have one or more of their stones evaluated by
                                an alchemist for useful magical properties.
                                This is done during the trading phase of the
                                post-battle sequence (consequently, this
                                means if a stone is chosen to be evaluated and
                                yields no special power, it cannot
                                subsequently be sold until after the next
                                battle). Instead of searching for a rare item, a
                                hero may take one shard of the warband’s
                                wyrdstone to an alchemist. Numerous
                                alchemists have flocked to Mordheim to study
                                the stones, and they ply their trade from tents
                                and wagons in the encampments around the
                                city. Alchemists are known for their greed,
                                however, and they do not provide their
                                services for free; for each stone evaluated, the
                                warband must pay 20 gold crowns. When the
                                stone is evaluated, roll 2D6 on the chart.";
                break;
            case 4:
                title = "Using Stones";
                diceRollText = "Roll a D6 and enter the result:";
                description = @"Stones may only be used by heroes, just like
                                other equipment. No hero may ever carry
                                more than one stone at a time (the combined
                                Chaotic magic would instantly turn them into
                                Chaos Spawn). Using a wyrdstone’s power is
                                always a dangerous undertaking and to
                                represent this, after every battle, each hero
                                who carried a stone must make a check to see
                                if they have been adversely affected by their
                                usage of the stone’s power. Make the check by
                                rolling 2D6 for each hero: a roll of 2, 3, 11 or
                                12 indicates that they have been affected.
                                Skaven, having a natural tolerance for
                                warpstone, are only affected on the roll of 2
                                or 12. Roll a D6 on the following chart over
                                the page to see what has happened to affected
                                models.";
                break;
            case 5:
                title = "Random Mutations Table";
                diceRollText = "Roll a D66 and enter the result:";
                description = @"Mordheim is a city under the sway of Chaos,
                                and with Chaos comes mutation and change.
                                There are numerous ways by which a warrior
                                can be afflicted with mutation, and there are
                                some who actually seek out mutation as a
                                'reward’ of the Chaos Powers. While mutations
                                are not always harmful, and indeed can often
                                be helpful, they are a mark of Chaos, and as
                                such those who bear them are feared,
                                shunned and persecuted throughout the
                                Empire.<br /><br />
                                The following is a table used to generate the
                                colourful, exotic, and sometimes debilitating
                                mutations that will be visited upon certain
                                warriors at certain times (i.e. as a result of
                                exposure to Wyrdstone, for example). The
                                table may also prove useful to Gamemasters
                                who want to quickly generate some
                                interesting mutants for a special scenario. The
                                table uses a D66 roll, just like the Heroes
                                Serious Injuries table in the rulebook. If the
                                mutant rolls a mutation that it already
                                possesses, re-roll it until a new mutation is
                                generated.<br /><br />
                                Note: The great danger of mutation is that it
                                will ultimately overwhelm the victim with the
                                corrupting power of Chaos, reducing them to
                                a monstrous and mindless Chaos Spawn. To
                                represent this danger, if a warrior ever has a
                                characteristic reduced to zero as the result of
                                a mutation, they immediately degenerate into
                                a loathsome Chaos Spawn (see the full rules
                                for Chaos Spawn above).<br /><br />
                                Any member of a human, mercenary warband
                                (this includes both Ostlanders and
                                Averlanders) that receives a mutation marked
                                with * is immediately drummed out of the
                                warband by his suspicious peers. Remove the
                                hero from the roster, his equipment is lost.";
                break;

        }
    }
}
