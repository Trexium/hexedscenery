@using Components
@page "/mordheim/powerinthestones"
@using HexedSceneryCommon.Mordheim;
@using HexedSceneryCommon.User;
@inject Services.IUserService _userService;
@inject Services.IUserStoredEncountersService _userStoredEncountersService;
@inject Services.IResourceService _resourceService;

<PageTitle>Power in the Stones</PageTitle>


<div class="background-paper">
    <svg>
        <filter id="wavy2">
            <feTurbulence x="0" y="0" baseFrequency="0.02" numOctaves="5" seed="1"></feTurbulence>
            <feDisplacementMap in="SourceGraphic" scale="20" />
        </filter>
    </svg>
</div>
<div class="mordheim-page">
    <div class="encounters-pane">
        <h2>Power in the Stones</h2>
        <HexedSceneryWebsite.Components.EncounterSelector EncounterType="3" LabelText="Roll 2D6 and enter the result:" CacheKey="@encounterStoreKey" OnEncounterSelected="@NewEncounter" />
    </div>
    <br />
    <div class="encounter">
        <div class="current-encounter">
            @if (currentEncounter != null)
            {
                <h3>@currentEncounter.ResultNumber @currentEncounter.Name</h3>
                <p>@((MarkupString)currentEncounter.Description)</p>
                @if (currentEncounter.DiceChart != null)
                {
                    <table class="dice-chart-table">
                        <thead>
                            <tr>
                                <th class="first-column">@currentEncounter.DiceChart.Dice</th>
                                <th>Result</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in currentEncounter.DiceChart.DiceResults)
                            {
                                <tr>
                                    <td>@result.ResultNumber</td>
                                    <td>@((MarkupString)result.Description)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                @if (!string.IsNullOrEmpty(currentEncounter.BottomText))
                {
                    <p>@((MarkupString)currentEncounter.BottomText)</p>
                }
            }
        </div>
        <div class="previous-encounters">
            @if (prevEncounters != null && prevEncounters.Any())
            {
                <div class="previous-encounters-header">
                    <div class="smaller-column">Result</div>
                    <div>Table</div>
                    <div>Effect</div>
                    <div class="smaller-column"></div>
                </div>

                @foreach (var prevEncounter in prevEncounters)
                {
                    <div class="previous-encounters-row-data" @onclick="() => GoToPreviousEncounter(prevEncounter)">
                        <div class="smaller-column">
                            @prevEncounter.ResultNumber
                        </div>
                        <div>
                            @_resourceService.GetEncounterType(prevEncounter.EncounterTypeId)
                        </div>
                        <div>
                            @prevEncounter.Name
                        </div>
                        <div class="smaller-column">
                            <span @onclick="() => DeletePreviousEncounter(prevEncounters.IndexOf(prevEncounter))" class="oi oi-trash" />
                        </div>
                    </div>
                }
                <br />
                <br />
            }
        </div>
    </div>

    <div class="description">
        <h2>Description</h2>
        <p>
            The value of the wyrdstone shards is not
            simply the coin that nobles and
            merchants are willing to pay for them. It is a
            well-known fact that the stones are rich in
            magic, and they are said to grant a variety of
            powers to those that learn to use them. Tales
            are told among the common folk of stones
            that caused a certain farmer’s harvest to
            double, or of the stone that made old Herr
            Grutenbauer's dog speak like a man. True or
            not, these tales hint at the powerful and
            chaotic forces at work in the stones. The most
            common use for the stones’ magic has to do
            with the discovery of the famed alchemist van
            Hoffman of Reikland. It was he who first
            observed that Wyrdstone can serve as a
            catalyst in the transmutation of base metals
            into gold. This usage of the stones has come
            to be the primary obsession of those who seek
            it, for many are willing to pay princely sums
            for stones that will make them an even larger
            fortune. Yet there are those who continue to
            seek the stones for their more arcane
            uses, and even mercenaries have
            been known to keep a stone
            or two that was thought
            to bring luck, healing,
            or other magical
            benefits.<br /><br />
            Yet the stones
            are ultimately
            the work of
            Chaos, and
            those who
            seek to
            use
            them
            often
            learn
            to
            fear their magic rather than harness it. For
            every tale of a harvest that doubled, there are
            two about the harvests that rotted in the field
            when exposed to the strange glow of the
            stones; and for every tale of a dog that learned
            to speak like a man there are darker tales of
            animals that turned into a gruesome parody of
            a man-beast. The tales of magical healings are
            mixed with many of mutation and death
            brought on by exposure to the stones. Yet
            greed is the downfall of many in the City of
            the Damned, and the greed for power is
            perhaps the greatest of all...<br /><br />
            Note: Witch Hunters, Sisters of Sigmar,
            Bretonnians, High Elf Shadow Warriors and
            Dwarfs are all too aware of the corrupting
            power of the stones, and will not make use of
            them under any circumstances.<br /><br />
            <h2>Evaluating Stones</h2>
            Instead of selling or storing all of a warband's
            wyrdstone shards, a player may choose to
            have one or more of their stones evaluated by
            an alchemist for useful magical properties.
            This is done during the trading phase of the
            post-battle sequence (consequently, this
            means if a stone is chosen to be evaluated and
            yields no special power, it cannot
            subsequently be sold until after the next
            battle). Instead of searching for a rare item, a
            hero may take one shard of the warband’s
            wyrdstone to an alchemist. Numerous
            alchemists have flocked to Mordheim to study
            the stones, and they ply their trade from tents
            and wagons in the encampments around the
            city. Alchemists are known for their greed,
            however, and they do not provide their
            services for free; for each stone evaluated, the
            warband must pay 20 gold crowns. When the
            stone is evaluated, roll 2D6 on the chart.
        </p>
    </div>

</div>

@code {
    private string resultNumberString = string.Empty;
    private UserInfo userInfo;
    private List<Encounter> prevEncounters;
    private string encounterStoreKey;
    private Encounter currentEncounter;

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    private async void GoToPreviousEncounter(Encounter prevEncounter)
    {
        currentEncounter = prevEncounter;
        StateHasChanged();
    }

    private async void DeletePreviousEncounter(int prevEncounterIndex)
    {
        prevEncounters.RemoveAt(prevEncounterIndex);
        StateHasChanged();
    }

    private async void NewEncounter(Encounter encounter)
    {
        await _userStoredEncountersService.StoreEncounter(encounterStoreKey, encounter);
        prevEncounters = await _userStoredEncountersService.GetUserEncounters(encounterStoreKey);
        currentEncounter = encounter;
        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        userInfo = await _userService.GetUserInfo();
    }

    protected override async Task OnParametersSetAsync()
    {
        encounterStoreKey = $"powerinthestones_{userInfo.IpAddress}";
        prevEncounters = await _userStoredEncountersService.GetUserEncounters(encounterStoreKey);
        currentEncounter = null;
    }
}
