@using Components
@page "/mordheim/misctables/"
@using HexedSceneryCommon.Mordheim;
@using HexedSceneryCommon.User;
@inject Services.IUserService _userService;
@inject Services.IUserStoredEncountersService _userStoredEncountersService;
@inject Services.IResourceService _resourceService;

<PageTitle>Misc. Combat Tables</PageTitle>

<div class="background-paper">
    <svg>
        <filter id="wavy2">
            <feTurbulence x="0" y="0" baseFrequency="0.02" numOctaves="5" seed="1"></feTurbulence>
            <feDisplacementMap in="SourceGraphic" scale="20" />
        </filter>
    </svg>
</div>
<div class="mordheim-page">
    <div class="encounters-pane">
        <div class="encounter-type-selection">
            <h1>Misc. Combat Tables</h1>
        </div>
        <div class="encounter-type-selection">
            <div class="selection-item @(encounterType == 6 ? "selected" : "")" @onclick="() => encounterType = 6">
                Blackpowder Misfires
            </div>
            <div class="divider hidden-mobile"></div>
            <div class="selection-item @(encounterType == 13 ? "selected" : "")" @onclick="() => encounterType = 13">
                Stupidity
            </div>
            <div class="divider hidden-mobile"></div>
            <div class="selection-item @(encounterType == 14 ? "selected" : "")" @onclick="() => encounterType = 14">
                Animosity
            </div>
        </div>
        @if (encounterType.HasValue)
        {
            <HexedSceneryWebsite.Components.EncounterSelector EncounterType="@encounterType.Value" LabelText="Roll a D6 and enter the result:" CacheKey="@encounterStoreKey" OnEncounterSelected="@NewEncounter" />
        }
        else
        {
            <HexedSceneryWebsite.Components.EncounterSelector LabelText="Choose weapon type" CacheKey="@encounterStoreKey" />
        }
    </div>
    <br />
    <div class="encounter">
        @if (currentEncounter != null)
        {
            <h3>@currentEncounter.ResultNumber @currentEncounter.Name</h3>
            <p>@((MarkupString)currentEncounter.Description)</p>
        }
        @if (prevEncounters != null)
        {
            <div class="previous-encounters container">
                <div class="row">
                    <div class="col-12">
                        <div class="row">
                            <div class="col-lg-5 col-9">
                                <div class="row">
                                    <div class="previous-encounters-title col-lg-2 col-3">
                                        Result
                                    </div>
                                    <div class="previous-encounters-title col-lg-4 col-4">
                                        Table
                                    </div>
                                    <div class="previous-encounters-title col-lg-6 col-5">
                                        Effect
                                    </div>
                                </div>
                            </div>
                        </div>
                        @foreach (var prevEncounter in prevEncounters)
                        {
                            @if (prevEncounter != null)
                            {
                                <div class="previous-encounters-list">
                                    <div class="row">
                                        <div @onclick="() => GoToPreviousEncounter(prevEncounter)" class="previous-encounters-list-item col-lg-5 col-9">
                                            <div class="row">
                                                <div class="col-lg-2 col-3">
                                                    @prevEncounter.ResultNumber
                                                </div>
                                                <div class="col-lg-4 col-4">
                                                    @_resourceService.GetEncounterType(prevEncounter.EncounterTypeId)
                                                </div>
                                                <div class="col-lg-6 col-5">
                                                    @prevEncounter.Name
                                                </div>
                                            </div>
                                        </div>
                                        <div class="previous-encounters-list-item-trash col-lg-2 col-1">
                                            <span @onclick="() => DeletePreviousEncounter(prevEncounters.IndexOf(prevEncounter))" class="oi oi-trash" />
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
            <br />
            <br />
        }



    </div>
</div>


@code {
    private int? encounterType { get; set; }
    private string resultNumberString = string.Empty;
    private UserInfo userInfo;
    private List<Encounter> prevEncounters;
    private string encounterStoreKey;
    private Encounter currentEncounter;

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }

    private async void GoToPreviousEncounter(Encounter prevEncounter)
    {
        currentEncounter = prevEncounter;
        StateHasChanged();
    }

    private async void DeletePreviousEncounter(int prevEncounterIndex)
    {
        prevEncounters.RemoveAt(prevEncounterIndex);
        StateHasChanged();
    }

    private async void NewEncounter(Encounter encounter)
    {
        await _userStoredEncountersService.StoreEncounter(encounterStoreKey, encounter);
        prevEncounters = await _userStoredEncountersService.GetUserEncounters(encounterStoreKey);
        currentEncounter = encounter;
        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        userInfo = await _userService.GetUserInfo();
    }

    protected override async Task OnParametersSetAsync()
    {
        encounterStoreKey = $"misctables{userInfo.IpAddress}";
        prevEncounters = await _userStoredEncountersService.GetUserEncounters(encounterStoreKey);
        currentEncounter = null;
    }
}
