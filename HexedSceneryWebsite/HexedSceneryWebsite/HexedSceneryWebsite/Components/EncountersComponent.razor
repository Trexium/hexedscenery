@using Components
@using HexedSceneryCommon.Mordheim;
@using HexedSceneryCommon.User;
@inject Services.IUserStoredEncountersService _userStoredEncountersService;
@inject Services.IResourceService _resourceService;

<div class="encounters-pane">
    <h2>@Title</h2>
    <HexedSceneryWebsite.Components.EncounterSelector EncounterType="@EncounterType" LabelText="@SelectorLabel" OnEncounterSelected="NewEncounter" />
</div>
<div class="encounter">
    <div class="current-encounter">
        @if (currentEncounter != null)
        {
            <h3>@currentEncounter.ResultNumber @currentEncounter.Name</h3>
            <p>@((MarkupString)currentEncounter.Description)</p>
            @if (currentEncounter.DiceChart != null)
            {
                <table class="dice-chart-table">
                    <thead>
                        <tr>
                            <th class="first-column">@currentEncounter.DiceChart.Dice</th>
                            <th>Result</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var result in currentEncounter.DiceChart.DiceResults)
                        {
                            <tr>
                                <td>@result.ResultNumber</td>
                                <td>@((MarkupString)result.Description)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            @if (!string.IsNullOrEmpty(currentEncounter.BottomText))
            {
                <p>@((MarkupString)currentEncounter.BottomText)</p>
            }
        }
    </div>
    <div class="previous-encounters">
        @if (prevEncounters != null && prevEncounters.Any())
        {
            <div class="previous-encounters-header">
                <div class="smaller-column">Result</div>
                <div>Table</div>
                <div>Effect</div>
                <div class="smaller-column"></div>
            </div>

            @foreach (var prevEncounter in prevEncounters)
            {
                <div class="previous-encounters-row-data" @onclick="() => GoToPreviousEncounter(prevEncounter)">
                    <div class="smaller-column">
                        @prevEncounter.ResultNumber
                    </div>
                    <div>
                        @_resourceService.GetEncounterType(prevEncounter.EncounterTypeId)
                    </div>
                    <div>
                        @prevEncounter.Name
                    </div>
                    <div class="smaller-column">
                        <span @onclick="() => DeletePreviousEncounter(prevEncounters.IndexOf(prevEncounter))" class="oi oi-trash" />
                    </div>
                </div>
            }
            <br />
            <br />
        }
    </div>
</div>

@code {
    private List<Encounter> prevEncounters;
    private string encounterStoreKey;
    private Encounter currentEncounter;

    [Parameter]
    public int EncounterType { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string SelectorLabel { get; set; }

    [Parameter]
    public string EncounterStoreKey { get; set; }

    private async void GoToPreviousEncounter(Encounter prevEncounter)
    {
        currentEncounter = prevEncounter;
        StateHasChanged();
    }

    private async void DeletePreviousEncounter(int prevEncounterIndex)
    {
        prevEncounters.RemoveAt(prevEncounterIndex);
        StateHasChanged();
    }

    public async void NewEncounter(Encounter encounter)
    {
        await _userStoredEncountersService.StoreEncounter(EncounterStoreKey, encounter);
        prevEncounters = await _userStoredEncountersService.GetUserEncounters(EncounterStoreKey);
        currentEncounter = encounter;
        StateHasChanged();

    }

    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override async Task OnParametersSetAsync()
    {
        prevEncounters = await _userStoredEncountersService.GetUserEncounters(EncounterStoreKey);
        currentEncounter = null;
    }
}