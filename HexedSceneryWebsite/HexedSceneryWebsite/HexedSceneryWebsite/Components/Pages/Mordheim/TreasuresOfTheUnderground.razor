@using HexedSceneryWebsite.Components.Components
@page "/mordheim/treasuresoftheounderground"
@using HexedSceneryCommon.Mordheim;
@using HexedSceneryCommon.User;
@inject Services.IUserService _userService;
@inject Services.IUserStoredEncountersService _userStoredEncountersService;
@inject Services.IResourceService _resourceService;


<PageTitle>Treasures of the Underground</PageTitle>


<div class="background-paper">
    <svg>
        <filter id="wavy2">
            <feTurbulence x="0" y="0" baseFrequency="0.02" numOctaves="5" seed="1"></feTurbulence>
            <feDisplacementMap in="SourceGraphic" scale="20" />
        </filter>
    </svg>
</div>
<div class="mordheim-page">
    <EncountersComponent EncounterType="21"
        Title="Treasures of the Underground"
        SelectorLabel="Roll a D6 and enter the result:"
        EncounterStoreKey="@encounterStoreKey"
        IntroText="This chart is used in the scenario Treasures of the Underground. Each player rolls for random happening each turn regardless of if something has already happened. Use the this table instead of your normal random happening table."
        HideColumn2=true />
</div>

@code {
    private string resultNumberString = string.Empty;
    private UserInfo userInfo;
    private string encounterStoreKey;

    [CascadingParameter(Name = "ErrorComponent")]
    protected IErrorComponent ErrorComponent { get; set; }


    protected override async Task OnInitializedAsync()
    {
        userInfo = await _userService.GetUserInfo();
    }

    protected override async Task OnParametersSetAsync()
    {
        encounterStoreKey = $"treasuresoftheounderground_{userInfo.IpAddress}";
    }
}
